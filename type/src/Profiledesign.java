import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Frame;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;

public class Profiledesign extends javax.swing.JFrame {
    private JPanel profileDetailsPanel;
    private static ArrayList<String> emails;
    private static String email;
    static String email_sudden;
    /**
     * Creates new form Profiledesign
     */
    public Profiledesign(String email) {
        this.email = email;
        initComponents();
        fetchEmails(); 
        createProfileButtons();
        jPanel3.revalidate();
    jPanel3.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {


        jPanel3 = new javax.swing.JPanel();
        ProfileLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        Usernamelabel = new javax.swing.JLabel();
        AlltimeLabel = new javax.swing.JLabel();
        Last10Label = new javax.swing.JLabel();
        Quotes = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ExitButton = new javax.swing.JButton();
        Mispelled_words = new javax.swing.JLabel();
        Mispelled_label = new javax.swing.JLabel();
        sudden_death = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(630, 500));
        getContentPane().setLayout(null);

        jPanel3.setOpaque(false);
        jPanel3.setPreferredSize(new java.awt.Dimension(800, 530));
        jPanel3.setLayout(null);

        ProfileLabel.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 30)); // NOI18N
        ProfileLabel.setForeground(new java.awt.Color(255, 255, 255));
        ProfileLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ProfileLabel.setText("PROFILE");
        jPanel3.add(ProfileLabel);
        ProfileLabel.setBounds(220, 10, 140, 30);

        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));
        jSeparator1.setPreferredSize(new java.awt.Dimension(50, 15));
        jPanel3.add(jSeparator1);
        jSeparator1.setBounds(0, 50, 630, 10);

        jScrollPane1.setBackground(new java.awt.Color(0, 102, 51));
        jScrollPane1.setOpaque(false);
        jScrollPane1.setViewport(null);
        jScrollPane1.setViewportView(null);

        jPanel1.setOpaque(false);

        jPanel1.setLayout(new BoxLayout(jPanel1, BoxLayout.Y_AXIS)); // Use BoxLayout for vertical arrangement


        jScrollPane1.setViewportView(jPanel1);
        jPanel3.add(jScrollPane1);
        jScrollPane1.setBounds(0, 60, 170, 440);
        jScrollPane1.getViewport().setOpaque(false);
        jScrollPane1.setBorder(null);

        jPanel2.setOpaque(false);

        Usernamelabel.setFont(new java.awt.Font("Verdana Pro Cond Black", 1, 19)); // NOI18N
        Usernamelabel.setForeground(new java.awt.Color(255, 255, 255));
        Usernamelabel.setText(null);

        AlltimeLabel.setFont(new java.awt.Font("Verdana Pro Cond Black", 1, 16)); // NOI18N
        AlltimeLabel.setForeground(new java.awt.Color(255, 255, 255));
        AlltimeLabel.setText(null);
        AlltimeLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        Last10Label.setFont(new java.awt.Font("Verdana Pro Cond Black", 1, 16)); // NOI18N
        Last10Label.setForeground(new java.awt.Color(255, 255, 255));
        Last10Label.setText(null);
        Last10Label.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        Quotes.setFont(new java.awt.Font("Viner Hand ITC", 1, 14)); // NOI18N
        Quotes.setForeground(new java.awt.Color(255, 255, 255));
        Quotes.setText("Increase your typing speed while racing against others!");

        jLabel1.setFont(new java.awt.Font("Verdana Pro Cond Black", 0, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText(null);

        jLabel3.setFont(new java.awt.Font("Verdana Pro Cond Black", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText(null);

        jLabel4.setFont(new java.awt.Font("Verdana Pro Cond Black", 0, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText(null);

        jLabel5.setFont(new java.awt.Font("Verdana Pro Cond Black", 0, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText(null);

        Mispelled_words.setFont(new java.awt.Font("Verdana Pro Cond Black", 1, 12)); // NOI18N
        Mispelled_words.setForeground(new java.awt.Color(255, 255, 255));

        Mispelled_label.setFont(new java.awt.Font("Verdana Pro Cond Black", 1, 14)); // NOI18N
        Mispelled_label.setForeground(new java.awt.Color(255, 255, 255));


        sudden_death.setBackground(new java.awt.Color(0, 51, 51));
        sudden_death.setFont(new java.awt.Font("Verdana Pro Cond Black", 1, 12)); // NOI18N
        sudden_death.setForeground(new java.awt.Color(255, 255, 255));
        sudden_death.setText(null);
        sudden_death.setBorder(null);
        sudden_death.addMouseListener(new MouseAdapter() {
            public void mouseEntered(MouseEvent e) {
               sudden_death.setBackground(new java.awt.Color(0, 51, 51).darker()); // Darken the background color on hover
            }
        
            public void mouseExited(MouseEvent e) {
                sudden_death.setBackground(new java.awt.Color(0, 51, 51)); // Restore the original background color when the cursor leaves
            }
        });
        sudden_death.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sudden_deathActionPerformed(evt);
            }
        });

        
        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Quotes, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Usernamelabel, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Mispelled_label, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(Mispelled_words, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(Last10Label, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(AlltimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(sudden_death, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(Usernamelabel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AlltimeLabel)
                    .addComponent(Last10Label))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(28, 28, 28)
                .addComponent(Mispelled_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Mispelled_words, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(sudden_death)
                .addGap(18, 18, 18)
                .addComponent(Quotes, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );


        jPanel3.add(jPanel2);
        jPanel2.setBounds(180, 60, 450, 430);

        ExitButton.setBackground(new java.awt.Color(255, 0, 51));
        ExitButton.setFont(new java.awt.Font("Showcard Gothic", 1, 14)); // NOI18N
        ExitButton.setForeground(new java.awt.Color(255, 255, 255));
        ExitButton.setText("EXIT");
        ExitButton.setBorder(null);
        ExitButton.setFocusPainted(false); 
        ExitButton.addMouseListener(new MouseAdapter() {
            public void mouseEntered(MouseEvent e) {
               ExitButton.setBackground(Color.RED.darker()); // Darken the background color on hover
            }
        
            public void mouseExited(MouseEvent e) {
                ExitButton.setBackground(Color.RED); // Restore the original background color when the cursor leaves
            }
        });
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });
        jPanel3.add(ExitButton);
        ExitButton.setBounds(10, 10, 75, 30);

        jLabel2.setBackground(new java.awt.Color(245, 245, 245));
        jLabel2.setIcon(new javax.swing.ImageIcon("187319775.jpg")); // NOI18N
        jLabel2.setPreferredSize(new java.awt.Dimension(1500, 1200));
        jPanel3.add(jLabel2);
        jLabel2.setBounds(0, 0, 630, 500);

        getContentPane().add(jPanel3);
        jPanel3.setBounds(0, 0, 630, 490);

        pack();
    }// </editor-fold>  

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {     
        this.dispose();                                    
        Menu menu = new Menu(email);
        menu.setVisible(true);
        menu.setLocationRelativeTo(null);
    } 

    private void sudden_deathActionPerformed(java.awt.event.ActionEvent evt) {                                        
        displaydetails(email_sudden);
    }     
 
    
    static void fetchEmails() {
        // Fetch usernames from the database and populate the usernames ArrayList
        emails = new ArrayList<>();
        try (Connection connection = DatabaseConnection.getConnection()) {
            String query = "SELECT players_email FROM player_profiles"; // Assuming your table is named player_profiles
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                String email = resultSet.getString("players_email");
                emails.add(email);
            }
        } catch (SQLException e) {
            e.printStackTrace(); // Handle potential exceptions properly in your application
        }
    }

    private void createProfileButtons() {
        Dimension buttonSize = new Dimension(150, 30);
        for (String email : emails) {
            JButton profileButton = new JButton(email);
            profileButton.setAlignmentX(Component.CENTER_ALIGNMENT);
            profileButton.setAlignmentY(Component.CENTER_ALIGNMENT);
            profileButton.setPreferredSize(buttonSize); // Set the fixed button size
            profileButton.setMaximumSize(buttonSize); // Ensure fixed size
            profileButton.setMinimumSize(buttonSize); // Ensure fixed size
            profileButton.addActionListener(new ProfileButtonListener(email));
            profileButton.setFocusPainted(false); 
            jPanel1.add(profileButton);

            

    }
    int preferredHeight = emails.size() * 300;
    jPanel1.setPreferredSize(new Dimension(100, preferredHeight));
            jPanel1.revalidate();
            jPanel1.repaint();
            jPanel1.setVisible(true);
            
            jPanel3.repaint();
            jPanel3.revalidate();
            jPanel3.setVisible(true);

    }
    
    private class ProfileButtonListener implements ActionListener {
        private String email;

        public ProfileButtonListener(String email) {
            this.email = email;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                Profiledesign.email_sudden = email;
                displayPlayerProfile(email);
            } catch (IOException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
        }
    }

    private void displayPlayerProfile(String email) throws IOException {
        jPanel2.removeAll();
    
        try (Connection connection = DatabaseConnection.getConnection()) {
            // Check if records exist for the selected email
            String countQuery = "SELECT COUNT(*) AS record_count " +
                    "FROM results " +
                    "INNER JOIN player_profiles ON results.players_ID = player_profiles.players_ID " +
                    "WHERE player_profiles.players_email = ?";
            try (PreparedStatement countStatement = connection.prepareStatement(countQuery)) {
                countStatement.setString(1, email);
                try (ResultSet countResult = countStatement.executeQuery()) {
                    countResult.next();
                    int recordCount = countResult.getInt("record_count");
    
                    if (recordCount > 0) {
                        // Records exist, fetch average values for last 10 games and all-time
                        String last10AvgQuery = "SELECT AVG(accuracy) AS last_10_avg_accuracy, AVG(wpm) AS last_10_avg_wpm " +
                                "FROM (SELECT accuracy, wpm " +
                                "FROM results " +
                                "INNER JOIN player_profiles ON results.players_ID = player_profiles.players_ID " +
                                "WHERE player_profiles.players_email = ?" +
                                "ORDER BY timestamp DESC " +
                                "LIMIT 10) AS last_10_games ";
                        try (PreparedStatement last10AvgStatement = connection.prepareStatement(last10AvgQuery)) {
                            last10AvgStatement.setString(1, email);
                            try (ResultSet last10AvgResult = last10AvgStatement.executeQuery()) {
                                double last10AvgAccuracy1 = 0.0;
                                double last10AvgWPM1 = 0.0;
                                
    
                                if (last10AvgResult.next()) {
                                    last10AvgAccuracy1 = last10AvgResult.getDouble("last_10_avg_accuracy");
                                    last10AvgWPM1 = last10AvgResult.getDouble("last_10_avg_wpm");
                                }

                                String last10AvgAccuracy = String.format("%.5f", last10AvgAccuracy1);
                                String last10AvgWPM = String.format(" %.5f", last10AvgWPM1);
    
                                String allTimeAvgQuery = "SELECT AVG(accuracy) AS all_time_avg_accuracy, AVG(wpm) AS all_time_avg_wpm " +
                                        "FROM results " +
                                        "INNER JOIN player_profiles ON results.players_ID = player_profiles.players_ID " +
                                        "WHERE player_profiles.players_email = ?";
                                try (PreparedStatement allTimeAvgStatement = connection.prepareStatement(allTimeAvgQuery)) {
                                    allTimeAvgStatement.setString(1, email);
                                    try (ResultSet allTimeAvgResult = allTimeAvgStatement.executeQuery()) {
                                        double allTimeAvgAccuracy1 = 0.0;
                                        double allTimeAvgWPM1 = 0.0;
    
                                        if (allTimeAvgResult.next()) {
                                            allTimeAvgAccuracy1 = allTimeAvgResult.getDouble("all_time_avg_accuracy");
                                            allTimeAvgWPM1 = allTimeAvgResult.getDouble("all_time_avg_wpm");
                                        }

                                        String allTimeAvgAccuracy = String.format("%.5f", allTimeAvgAccuracy1);
                                        String allTimeAvgWPM = String.format("%.5f", allTimeAvgWPM1);

                                        // Display fetched data in the UI (labels, etc.)
                                        Usernamelabel.setText("USERNAME : "+ email);
                                        Last10Label.setText("LAST 10 GAMES");
                                        jLabel1.setText("AVG ACCURACY : "  + last10AvgAccuracy);
                                        jLabel4.setText("AVG WPM : " + last10AvgWPM);
                                        
                                        AlltimeLabel.setText("ALL TIME");
                                        jLabel3.setText("AVG ACCURACY : "  + allTimeAvgAccuracy);
                                        jLabel5.setText("AVG WPM : " + allTimeAvgWPM);

                                        sudden_death.setText("Sudden Death Score");

                                        Mispelled_label.setText("10 MOST MISSPELLED WORDS");
                                        MistypedWordCSV obj = new MistypedWordCSV(email);
                                        String[] topWordsArray = obj.getTop10WordsArray();
                                        StringBuilder Text = new StringBuilder("<html>");
                                        for (int i =0; i<topWordsArray.length; i++){
                                            Text.append(topWordsArray[i]).append("               ");
                                            if ((i+1)%5 ==0){
                                                Text.append("<br/>");
                                            }

                                        }
                                        Text.append("</html>");
                                        Mispelled_words.setText(Text.toString());
                                        
                                        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Quotes, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Usernamelabel, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Mispelled_label, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(Mispelled_words, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(Last10Label, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(AlltimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(sudden_death, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(Usernamelabel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AlltimeLabel)
                    .addComponent(Last10Label))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(28, 28, 28)
                .addComponent(Mispelled_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Mispelled_words, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(sudden_death)
                .addGap(18, 18, 18)
                .addComponent(Quotes, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

                                
                                        // Revalidate and repaint jPanel2 to reflect changes
                                        jPanel2.setVisible(true);
                                        jPanel2.revalidate();
                                        jPanel2.repaint();
                                        

                                    }
                                }
                            }
                        }
                    } else {
                        // No records found for the player

                        jPanel2.add(Quotes);
                         jPanel2.setVisible(true);
                                        jPanel2.revalidate();
                                        jPanel2.repaint();
                    }
                }
            }
    
            revalidate(); 
            repaint();
        } catch (SQLException e) {
            e.printStackTrace(); // Handle potential exceptions properly in your application
        }

    }
    private void displaydetails(String email){
    JPanel profileDetailsPanel = new JPanel(new BorderLayout());
    profileDetailsPanel.setBorder(new EmptyBorder(20, 20, 20, 20));
    try (Connection connection = DatabaseConnection.getConnection()) {
            // Check if records exist for the selected email
            String countQuery = "SELECT COUNT(*) AS record_count " +
                    "FROM suddendeathresult " +
                    "INNER JOIN player_profiles ON suddendeathresult.players_ID = player_profiles.players_ID " +
                    "WHERE player_profiles.players_email = ?";
            try (PreparedStatement countStatement = connection.prepareStatement(countQuery)) {
                countStatement.setString(1, email);
                try (ResultSet countResult = countStatement.executeQuery()) {
                    countResult.next();
                    int recordCount = countResult.getInt("record_count");
    
                    if (recordCount > 0) {
                                String allTimeAvgQuery = "SELECT AVG(accuracy) AS all_time_avg_accuracy, AVG(wpm) AS all_time_avg_wpm " +
                                        "FROM suddendeathresult " +
                                        "INNER JOIN player_profiles ON suddendeathresult.players_ID = player_profiles.players_ID " +
                                        "WHERE player_profiles.players_email = ?";
                                try (PreparedStatement allTimeAvgStatement = connection.prepareStatement(allTimeAvgQuery)) {
                                    allTimeAvgStatement.setString(1, email);
                                    try (ResultSet allTimeAvgResult = allTimeAvgStatement.executeQuery()) {
                                        double allTimeAvgAccuracy1 = 0.0;
                                        double allTimeAvgWPM1 = 0.0;
    
                                        if (allTimeAvgResult.next()) {
                                            allTimeAvgAccuracy1 = allTimeAvgResult.getDouble("all_time_avg_accuracy");
                                            allTimeAvgWPM1 = allTimeAvgResult.getDouble("all_time_avg_wpm");
                                        }

                                        String allTimeAvgAccuracy = String.format("%.5f", allTimeAvgAccuracy1);
                                        String allTimeAvgWPM = String.format("%.5f", allTimeAvgWPM1);

    
                                        // Display fetched data in the UI (labels, etc.)
                                        JDialog profileDialog = new JDialog((Frame) SwingUtilities.getWindowAncestor(this), "Player Profile", true);
                                        profileDialog.setLayout(new BorderLayout());
                                        profileDialog.setSize(500, 250);

                                        JLabel usernameLabel = new JLabel("Username: " + email);
                                        usernameLabel.setFont(new Font("Arial", Font.BOLD, 18));
                                        usernameLabel.setHorizontalAlignment(SwingConstants.CENTER);
                                        profileDetailsPanel.add(usernameLabel, BorderLayout.NORTH);

                                        JPanel rightPanel = new JPanel(new GridLayout(0, 1, 0, 10));
                                        rightPanel.setBorder(new EmptyBorder(0, 20, 0, 0));

                                        JLabel allTimeLabel = new JLabel("All Time", SwingConstants.CENTER);
                                        allTimeLabel.setFont(new Font("Arial", Font.BOLD, 16));
                                        rightPanel.add(allTimeLabel);

                                        JLabel allTimeAccuracyLabel = new JLabel("Avg Accuracy: " + allTimeAvgAccuracy);
                                        JLabel allTimeWPMLabel = new JLabel("Avg WPM: " + allTimeAvgWPM);
                                        allTimeAccuracyLabel.setHorizontalAlignment(SwingConstants.CENTER);
                                        allTimeWPMLabel.setHorizontalAlignment(SwingConstants.CENTER);

                                        rightPanel.add(allTimeAccuracyLabel);
                                        rightPanel.add(allTimeWPMLabel);

                                        JScrollPane scrollPane = new JScrollPane(rightPanel);

                                        profileDetailsPanel.add(scrollPane, BorderLayout.CENTER);
                                        profileDialog.add(profileDetailsPanel, BorderLayout.CENTER);
                                        profileDialog.setVisible(true);
                                                                                

                                    }
                                }
                            }
                        
                    else {
                        // No records found for the player
                        JDialog profileDialog = new JDialog((Frame) SwingUtilities.getWindowAncestor(this), "Player Profile", true);
                        profileDialog.setLayout(new BorderLayout());
                        profileDialog.setSize(500, 250);
                        JLabel noDataLabel = new JLabel("No data available for this player.");
                        noDataLabel.setHorizontalAlignment(SwingConstants.CENTER);
                        profileDetailsPanel.add(noDataLabel);
                        profileDialog.add(profileDetailsPanel, BorderLayout.CENTER);
                        profileDialog.setVisible(true);
                    }
                }
            }
    
            revalidate(); // Refresh the panel to display new components
            repaint();
        } catch (SQLException e) {
            e.printStackTrace(); // Handle potential exceptions properly in your application
        }
    }



    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify                     
    private javax.swing.JLabel AlltimeLabel;
    private javax.swing.JLabel Last10Label;
    private javax.swing.JLabel ProfileLabel;
    private javax.swing.JLabel Quotes;
    private javax.swing.JLabel Usernamelabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton ExitButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel Mispelled_label;
    private javax.swing.JLabel Mispelled_words;
    private javax.swing.JButton sudden_death;
    // End of variables declaration                   
}
